<?php
/**
 * Implements hook_permission().
 */
function durp_permission() {
  return array(
    'administer durp settings' => array(
      'title' => t('Administer durp settings'),
      'description' => t('Allows users to configure durp settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function durp_menu() {
  $items = array();

  $items['admin/config/content/durp'] = array(
    'access arguments' => array('administer durp settings'),
    'page arguments' => array('durp_admin_settings_form'),
    'page callback' => 'drupal_get_form',
    'file' => 'durp.admin.inc',
    'title' => 'DURP',
    'description' => 'Configure durp settings.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_node_delete().
 */
function durp_node_delete($node) {
  db_delete('durp')->condition('nid', $node->nid)->execute();
}

function _durp_map_node($dossier_id, $dossierXML, $force = FALSE) {
  $xml_hash = md5($dossierXML);
  $dossierDOM = new DOMDocument;
  $dossierDOM->loadXML($dossierXML);

  // Get the current version from the database.
  $current = db_select('durp', 'd')
    ->fields('d', array('identifier', 'hash', 'nid'))
    ->condition('identifier', $dossier_id)
    ->execute()
    ->fetchAssoc();

  // Is this an actual update.
  if (!$force && $current && $xml_hash == $current['hash']) {
    return FALSE;
  }

  $plans = $dossierDOM->getElementsByTagName('Plan');
  $plan = FALSE;
  foreach ($plans as $plan) {
    // @todo, Loop through plans.. for now we only use the latest plan.
  }

  if ($plan) {
    $plan_uri = $plan->getElementsByTagName('GeleideFormulier')->item(0)->nodeValue;
    $planXML = file_get_contents($plan_uri);
    $planDOM = new DOMDocument;
    $planDOM->loadXML($planXML);
    $planXpath = new DOMXPath($planDOM);
    $planXpath->registerNamespace('ns', 'http://www.geonovum.nl/stri/2008/1');

    if ($current && !empty($current['nid'])) {
      $node = node_load($current['nid']);
    }
    else {
      $node = new stdClass();
      $node->uid = 1;
      $node->type = 'spatial_plan';
    }

    $node->title = $planXpath->query('/ns:GeleideFormulier/ns:Plan/ns:Eigenschappen/ns:Naam')->item(0)->nodeValue;
    $node->created = strtotime($planXpath->query('/ns:GeleideFormulier/ns:Plan/ns:Eigenschappen/ns:Datum')->item(0)->nodeValue);
    $node->changed = $node->created;

    // Taxonomy type fields.
    $type = $planXpath->query('/ns:GeleideFormulier/ns:Plan/ns:Eigenschappen/ns:Type')->item(0)->nodeValue;
    $type_term = bespoke_get_term_id($type, 'spatial_plan_type');
    $node->field_spatial_type = array(
      LANGUAGE_NONE => array(array('tid' => $type_term->tid))
    );
    $status = $planXpath->query('/ns:GeleideFormulier/ns:Plan/ns:Eigenschappen/ns:Status')->item(0)->nodeValue;
    $status_term = bespoke_get_term_id($status, 'spatial_plan_status');
    $node->field_spatial_status = array(
      LANGUAGE_NONE => array(array('tid' => $status_term->tid))
    );

    // Link type fields.
    // Setup a base uri for the links.
    $base_uri = str_replace(basename($plan_uri), '', $plan_uri);
    _durp_link_field($base_uri, 'field_spatial_rules', $planXpath, '/ns:GeleideFormulier/ns:Plan/ns:Onderdelen/ns:Regels', $node);
    _durp_link_field($base_uri, 'field_spatial_policy_doc', $planXpath, '/ns:GeleideFormulier/ns:Plan/ns:Onderdelen/ns:BeleidsDocument', $node);
    _durp_link_field($base_uri, 'field_spactial_decision_doc', $planXpath, '/ns:GeleideFormulier/ns:Plan/ns:Onderdelen/ns:BesluitDocument', $node);
    _durp_link_field($base_uri, 'field_spatial_explanation', $planXpath, '/ns:GeleideFormulier/ns:Plan/ns:Onderdelen/ns:Toelichting', $node);
    _durp_link_field($base_uri, 'field_spatial_dete_decision', $planXpath, '/ns:GeleideFormulier/ns:Plan/ns:Onderdelen/ns:VaststellingsBesluit', $node);
    _durp_link_field($base_uri, 'field_spatial_attachment', $planXpath, '/ns:GeleideFormulier/ns:Plan/ns:Onderdelen/ns:Bijlage', $node);
    _durp_link_field($base_uri, 'field_spatial_illustration', $planXpath, '/ns:GeleideFormulier/ns:Plan/ns:Onderdelen/ns:Illustratie', $node);

    // Location
    $imro = $planXpath->query('/ns:GeleideFormulier/ns:Plan/ns:Onderdelen/ns:IMRO')->item(0)->nodeValue;
    $gmlXML = file_get_contents($base_uri . $imro);
    if ($gmlXML) {
      // Load the Dom
      $gmlDOM = new DOMDocument;
      $gmlDOM->loadXML($gmlXML);

      // Setup xpath.
      $gmlXPATH = new DOMXPath($gmlDOM);
      $gmlXPATH->registerNamespace('imro', 'http://www.geonovum.nl/imro/2008/1');
      $gmlXPATH->registerNamespace('gml', 'http://www.opengis.net/gml');

      // We retrieve all positions and generate an average.
      $x = $y = array();
      $positions = $gmlXPATH->query('//gml:posList');
      $node->field_location = array(LANGUAGE_NONE => array());
      foreach ($positions as $posListNode) {
        $posListStr = $posListNode->nodeValue;
        $posList = explode(' ', $posListStr);

        $flag = TRUE;
        foreach ($posList as $value) {
          if ($flag) {
            $x[] = $value;
          }
          else {
            $y[] = $value;
          }

          $flag = !$flag;
        }
      }
      $x = array_sum($x) / count($x);
      $y = array_sum($y) / count($y);

      $location = rd2wgs($x, $y);
      $location['country'] = 'nl';

      $node->field_location[LANGUAGE_NONE][] = array(
        'country' => 'nl',
        'latitude' => (string)$location['latitude'],
        'longitude' => (string)$location['longitude'],
        'locpick' => array(
          'user_latitude' => (string)$location['latitude'],
          'user_longitude' => (string)$location['longitude'],
        ),
        'source' => 1,
      );
    }

    // Allow objects to be cleared from memory with garbage collection if
    // memory limits are close.
    unset($gmlDOM, $gmlXPATH, $pathDOM, $pathXpath, $dossierDOM);

    node_save($node);

    // Add to the durp table for hash checking and identifying.
    if ($node->nid) {
      db_delete('durp')
        ->condition('identifier', $dossier_id)
        ->execute();
      db_insert('durp')
        ->fields(array('identifier' => $dossier_id, 'hash' => $xml_hash, 'nid' => $node->nid))
        ->execute();

      return $node;
    }
  }
  else {
    drupal_set_message(t('Could not detect plan for !dossier_id', array('!dossier_id' => $dossier_id)));
  }

  return FALSE;
}

/**
 * Helper function for setting a link field.
 *
 * @param $base_uri
 *  Base url to the documents.
 * @param $field_name
 *  The drupal machine name for the field.
 * @param $planXpath
 *  The DOMXPath of the plan.
 * @param $xpathQuery
 *  Xpath query to the data.
 * @param $node
 *  The node to set the field data on.
 */
function _durp_link_field($base_uri, $field_name, DOMXPath $planXpath, $xpathQuery, $node) {
  $links = $planXpath->query($xpathQuery);
  $node->{$field_name} = array(LANGUAGE_NONE => array());
  foreach ($links as $linkNode) {
    $link_url = $base_uri .  $linkNode->nodeValue;
    $node->{$field_name}[LANGUAGE_NONE][] = array(
      'url' => $link_url,
      'title' => $linkNode->nodeValue,
    );
  }
}

/**
 * Function copied from:
 * http://www.god-object.com/2009/10/23/convert-rijksdriehoekscordinaten-to-latitudelongitude/
 */
function rd2wgs($x, $y) {
  // Calculate WGS84 coÃ¶rdinates
  $dX = ($x - 155000) * pow(10, - 5);
  $dY = ($y - 463000) * pow(10, - 5);
  $SomN = (3235.65389 * $dY) + (- 32.58297 * pow($dX, 2)) + (- 0.2475 *
      pow($dY, 2)) + (- 0.84978 * pow($dX, 2) *
      $dY) + (- 0.0655 * pow($dY, 3)) + (- 0.01709 *
      pow($dX, 2) * pow($dY, 2)) + (- 0.00738 *
      $dX) + (0.0053 * pow($dX, 4)) + (- 0.00039 *
      pow($dX, 2) * pow($dY, 3)) + (0.00033 * pow(
        $dX, 4) * $dY) + (- 0.00012 *
      $dX * $dY);
  $SomE = (5260.52916 * $dX) + (105.94684 * $dX * $dY) + (2.45656 *
      $dX * pow($dY, 2)) + (- 0.81885 * pow(
        $dX, 3)) + (0.05594 *
      $dX * pow($dY, 3)) + (- 0.05607 * pow(
        $dX, 3) * $dY) + (0.01199 *
      $dY) + (- 0.00256 * pow($dX, 3) * pow(
        $dY, 2)) + (0.00128 *
      $dX * pow($dY, 4)) + (0.00022 * pow($dY,
        2)) + (- 0.00022 * pow(
        $dX, 2)) + (0.00026 *
      pow($dX, 5));

  $Latitude = 52.15517 + ($SomN / 3600);
  $Longitude = 5.387206 + ($SomE / 3600);

  return array(
    'latitude' => $Latitude ,
    'longitude' => $Longitude);
}