<?php
/**
 * Implements hook_menu().
 */
function custom_lists_menu() {
  $items = array();

  $items['admin/structure/lists'] =  array(
    'title' => t('Lists'),
    'description' => t('Configuration for creating your own lists.'),
    'page callback' => 'custom_lists_admin',
    'access arguments' => array('administer custom lists'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'custom_lists.admin.inc',
  );

  $items['admin/structure/lists/add'] =  array(
    'title' => t('Add list'),
    'description' => t('Configuration for creating your own lists.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_lists_list_form'),
    'access arguments' => array('administer custom lists'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'custom_lists.admin.inc',
  );

  $items['admin/structure/lists/edit/%'] =  array(
    'title' => t('Edit list'),
    'description' => t('Configuration for creating your own lists.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_lists_list_form', 4),
    'access arguments' => array('administer custom lists'),
    'type' => MENU_CALLBACK,
    'file' => 'custom_lists.admin.inc',
  );

  $items['admin/structure/lists/delete/%'] = array(
    'title' => 'Delete list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_lists_delete_form', 4),
    'access arguments' => array('administer custom lists'),
    'file' => 'custom_lists.admin.inc',
  );

  $items['custom_lists/taxonomy/autocomplete'] = array(
    'title' => 'Autocomplete taxonomy',
    'page callback' => 'custom_lists_taxonomy_autocomplete',
    'access arguments' => array('administer custom lists'),
    'type' => MENU_CALLBACK,
    'file' => 'custom_lists.admin.inc',
  );

  $lists = custom_lists_get();
  foreach ($lists as $list) {
    if ($list['provide-page']) {
      $items[$list['path']] = array(
        'title' => $list['title'],
        'page callback' => 'custom_lists_page',
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
      );
    }
  }

  return $items;
}

/**
 * Implements hook_block_info().
 */
function custom_lists_block_info() {
  $blocks = array();

  $lists = custom_lists_get();
  foreach ($lists as $list_key => $list) {
    if ($list['provide-block']) {
      $blocks[$list_key] = array(
        'info' => t('Custom List: ') .$list['title'],
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function custom_lists_block_view($delta = '') {
  $list = custom_lists_get($delta);
  $block = array();
  $block['subject'] = $list['title'];
  $block['content'] = array();

  if ($list['type'] == 'content') {
    $block['content']['items'] = custom_lists_render_nodes($list['block-view-mode'], $list['block-items'], $list);
  }
  else if ($list['type'] == 'menu') {
    $items = array();
    $tree = _custom_lists_get_menu_tree($list);

    $rows = array();
    foreach ($tree as $link) {
      if ($link['link']['router_path'] == 'node/%') {
        $parts = explode('/', $link['link']['link_path']);
        if ($node = node_load($parts[1])) {
          $items[] = l($node->title, 'node/' . $node->nid);
          continue;
        }
      }

      $items[] = l($link['link']['link_title'], $link['link']['link_path']);
    }

    $block['content']['items'] = array(
      '#theme' => 'item_list',
      '#items' => $items,
    );
  }


  $show_more_link = isset($list['show-more-link']) ? $list['show-more-link'] : 'default';
  $more_link_uri = FALSE;
  switch ($show_more_link) {
    case 'hide':
      // Nothing to do.
      break;
    case 'default':
      if ($list['provide-page']) {
        $more_link_uri = $list['path'];
      }
      break;
    case 'custom':
      if ($list['more-link']) {
        $more_link_uri = $list['more-link'];
      }
      break;
  }
  if ($more_link_uri) {
    $block['content']['more-link'] = array(
      '#markup' => '<div class="more-link">' . l(t('More'), $more_link_uri) . '</div>',
    );
  }

  return $block;
}

/**
 * Implements hook_felix_block_view().
 *
 * @see custom_lists_block_view()
 * @see felix_felix_block_view()
 * @see custom_lists_module_implements_alter()
 */
function custom_lists_felix_block_view(&$block) {
  if ($block->module == 'custom_lists') {
    // Link Felix Block Manager block title the same way as non-overridden Custom Lists block title.
    if (isset($block->data['subject']) && strlen($block->data['subject']) && $block->data['subject'] != '<none>') {
      $list = custom_lists_get($block->delta);
      $block->subject = l($block->data['subject'], $list['path']);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function custom_lists_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'felix_block_view') {
    // Our implementation must run after the felix implementation.
    $group = $implementations['custom_lists'];
    unset($implementations['custom_lists']);
    $implementations['custom_lists'] = $group;
  }
}

/**
 * Implements hook_permission().
 */
function custom_lists_permission() {
  return array(
    'administer custom lists' => array(
      'title' => t('Administer custom lists'),
      'description' => t('Add and delete customs lists for your domain.'),
    ),
  );
}

function custom_lists_get_current() {
  $lists = custom_lists_get();
  $domain = domain_get_domain();

  $found_list = FALSE;
  foreach ($lists as $list) {
    if ($list['domain_id'] == $domain['domain_id'] && $list['path'] == $_GET['q']) {
      return $list;
    }
  }

  return FALSE;
}

function custom_lists_page() {
  $found_list = custom_lists_get_current();

  if (!$found_list) {
    return MENU_NOT_FOUND;
  }

  // If multiple domains have the same path the title might be different.
  // Set it again.
  drupal_set_title($found_list['display_title']);

  $output['intro-text'] = array(
    '#type' => 'markup',
    '#markup' => check_markup($found_list['intro-text'], 'filtered_html')
  );

  if ($found_list['type'] == 'content') {
    $output += custom_lists_page_content($found_list);
  }
  else if ($found_list['type'] == 'menu') {
    $output += custom_lists_page_menu($found_list);
  }

  return $output;
}

function custom_lists_page_content($list) {
  $output['nodes'] = custom_lists_render_nodes($list['page-view-mode'], $list['page-items'], $list, true);
  $output['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );
  return $output;
}

function custom_lists_render_nodes($view_mode, $items, $list, $page = false) {
  $nodes = custom_lists_content_nodes($list, $items);

  if ($view_mode == 'titles' || empty($view_mode)) {
    $items = array();
    foreach ($nodes as $node) {
      $items[] = l($node->title, 'node/' . $node->nid);
    }

    return array(
      '#theme' => 'item_list',
      '#items' => $items,
			'#attributes' => array(
			  'class' => 'custom-list-view-mode-titles',
			),
    );
  }
  else {
    $node_list = node_view_multiple($nodes, $view_mode);
    if ($page) {
      return $node_list;
    }
    else {
      return array(
        '#theme' => 'item_list',
        '#items' => array_filter(reset($node_list), function(&$node) {
          if (!is_array($node)) {
            return false;
          }

          $node = drupal_render($node);
          return true;
        }),
				'#attributes' => array(
				  'class' => 'custom-list-view-mode-' . $view_mode,
				),
      );
    }
  }
}

/**
 * Helper function for retrieving the nodes of a list.
 *
 * @param $list
 * @return array
 */
function custom_lists_content_nodes($list, $items) {
  // Default query.
  $query = db_select('node', 'n')->extend('PagerDefault');
  $query
    ->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->limit($items);

  // Conditions
  if ($list['node-type'] != '_any' && !empty($list['node-type'])) {
    $query->condition('n.type', $list['node-type']);
  }
  if ($list['node-queues'] != '_any' && !empty($list['node-queues'])) {
    $query->join('nodequeue_nodes', 'q', 'q.nid = n.nid');
    $query->condition('q.name', $list['node-queues']);
  }
  if (!empty($list['taxonomy'])) {
    $query->join('taxonomy_index', 'ti', 'ti.nid = n.nid');
    $query->condition('ti.tid', $list['taxonomy']);
  }

  // Sorting
  $parts = explode('_', $list['sort']);
  if ($list['node-queues'] && $parts[0] == 'queue') {
    $query->orderBy('q.position', $parts[1]);
  }
  else if ($parts[0] == 'weight') {
    $query->join('weight_weights', 'w', 'w.entity_id = n.nid');
    $query->orderBy('w.weight', $parts[1]);
  }
  else {
    $query->orderBy('n.' . $parts[0], $parts[1]);
  }

  $rs = $query->execute();
  $nids = array();
  foreach ($rs as $row) {
    $nids[] = $row->nid;
  }

  $nodes = node_load_multiple($nids);

  return $nodes;
}

function custom_lists_page_menu($list) {
  $tree = _custom_lists_get_menu_tree($list);

  $rows = array();
  foreach ($tree as $link) {
    if ($link['link']['router_path'] == 'node/%') {
      $parts = explode('/', $link['link']['link_path']);
      if ($node = node_load($parts[1])) {
        $rows[] = node_view($node, 'teaser');
        continue;
      }
    }

    // If we are not a node view we just add a link.
    $rows[] = array(
      '#type' => 'markup',
      '#markup' => '<h2>'. l($link['link']['link_title'], $link['link']['link_path']) . '</h2>',
    );
  }

  $output['rows'] = $rows;
  return $output;
}

function _custom_lists_get_menu_tree($list) {
  $menu_item = menu_link_load($list['menu-item']);

  return menu_build_tree($menu_item['menu_name'],
    array(
      'conditions' => array(
        'plid' => $menu_item['mlid']
      ),
      'min_depth' => $menu_item['depth']+1,
      'max_depth' => $menu_item['depth']+1,
    )
  );
}

/*
 * Helper function for retrieving all lists.
 */
function custom_lists_get($list_key = NULL) {
  $lists = variable_get('custom_lists_lists', array());

  if ($list_key) {
    return $lists[$list_key];
  }

  return $lists;
}

/**
 * Helper function for adding a list.
 *
 * @param $list_key
 * @param $list
 */
function custom_lists_add($list_key, $list) {
  $lists = custom_lists_get();
  $lists[$list_key] = $list;
  _custom_lists_set($lists);
}

/**
 * Helper function for deleting a list.
 *
 * @param $list_key
 */
function custom_lists_delete($list_key) {
  $lists = custom_lists_get();
  unset($lists[$list_key]);
  _custom_lists_set($lists);
}

/**
 * Helper function for setting the lists.
 *
 * @param $lists
 */
function _custom_lists_set($lists) {
  variable_set('custom_lists_lists', $lists);
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Implements hook_hansel_get_parent().
 */
function custom_lists_hansel_get_parent($path) {
  global $_domain;
  if (preg_match('/^node\\/([0-9]+)/', $path, $match) && ($node = node_load($match[1]))) {
    $lists = custom_lists_get();
    foreach ($lists as $list) {
      $contains_node = FALSE;
      if ($list['type'] == 'content' && $list['provide-page'] && $list['node-type'] == $node->type && $list['domain_id'] == $_domain['domain_id']) {
        $contains_node = TRUE;
      }
      if ($contains_node && !empty($list['taxonomy'])) {
        $tags = field_get_items('node', $node, 'field_tags');
        $contains_node = FALSE;
        foreach ($tags as $item) {
          if ($item['tid'] == $list['taxonomy']) {
            $contains_node = TRUE;
          }
        }
      }
      if ($contains_node) {
        return array(
          'path' => $list['path'],
          'title' => $list['display_title'],
        );
      }
    }
  }
  return FALSE;
}
