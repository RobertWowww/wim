<?php

/**
 * Implements hook_menu().
 */
function domain_scss_menu() {
  $items = array();

  if (module_exists('dominion')) {
    $items['admin/structure/dominion/list/%/theme'] = array(
      'title' => 'Theme',
      'page callback' => 'domain_scss_dominion_theme',
      'page arguments' => array(4),
      'access arguments' => array('manage dominion subsites'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 5,
    );
  }

  return $items;
}

/**
 * Implements dominion_operations_alter().
 */
function bespoke_dominion_operations_alter(&$operations, $domain) {
  // Dummy url for our theme form.
  $operations['theme'] = l(t('Theme'), 'admin/structure/dominion/list/' . $domain->domain_id . '/theme');
}


/**
* Implements hook_form_FORM_ID_alter().
*/
function domain_scss_form_system_theme_settings_alter(&$form, &$form_state) {
  if (isset($form_state['build_info']['args'][0]) && ($theme = $form_state['build_info']['args'][0]) && domain_scss_get_info($theme)) {
    $form['color'] = array(
      '#type' => 'fieldset',
      '#title' => t('Color scheme'),
      '#weight' => -1,
      '#attributes' => array('id' => 'color_scheme_form'),
      '#theme' => 'color_scheme_form',
    );
    $form['color'] += domain_scss_scheme_form($form, $form_state, $theme);
    $form['#validate'][] = 'color_scheme_form_validate';
    $form['#submit'][] = 'domain_scss_scheme_form_submit';
  }
}

/**
 * Implements hook_flush_caches().
 */
function domain_scss_flush_caches() {
  // This hook is mainly uses for returning tables that should be flushes.
  // We do not have any database data. Instead we return an empty array
  // and clear the color generated cache.
  if (!drupal_is_cli()) {
    // Do not flush cache in CLI, will result in broken pages.
    file_unmanaged_delete_recursive('public://color');
    return array();
  }
}

/**
 * Retrieves the Domain SCSS module information for a particular theme.
 */
function domain_scss_get_info($theme) {
  static $theme_info = array();

  if (isset($theme_info[$theme])) {
    return $theme_info[$theme];
  }

  $path = drupal_get_path('theme', $theme);
  $file = DRUPAL_ROOT . '/' . $path . '/domain_scss/domain_scss.inc';
  if ($path && file_exists($file)) {
    include $file;
    $theme_info[$theme] = $info;
    return $info;
  }
}

/**
 * Form constructor for the color configuration form for a particular theme.
 *
 * @param $theme
 *   The machine name of the theme whose color settings are being configured.
 *
 * @see color_scheme_form_validate()
 * @see color_scheme_form_submit()
 * @ingroup forms
 */
function domain_scss_scheme_form($complete_form, &$form_state, $theme) {
  $color_base = drupal_get_path('module', 'color');
  $info = domain_scss_get_info($theme);

  $info['schemes'][''] = array('title' => t('Custom'), 'colors' => array());
  $color_sets = array();
  $schemes = array();
  foreach ($info['schemes'] as $key => $scheme) {
    $color_sets[$key] = $scheme['title'];
    $schemes[$key] = $scheme['colors'];
    $schemes[$key] += $info['schemes']['default']['colors'];
  }

  // See if we're using a predefined scheme.
  // Note: we use the original theme when the default scheme is chosen.
  $current_scheme = variable_get('color_' . $theme . '_palette', array());
  foreach ($schemes as $key => $scheme) {
    if ($current_scheme == $scheme) {
      $scheme_name = $key;
      break;
    }
  }
  if (empty($scheme_name)) {
    if (empty($current_scheme)) {
      $scheme_name = 'default';
    }
    else {
      $scheme_name = '';
    }
  }

  // Add scheme selector.
  $form['scheme'] = array(
    '#type' => 'select',
    '#title' => t('Color set'),
    '#options' => $color_sets,
    '#default_value' => $scheme_name,
    '#attached' => array(
      // Add Farbtastic color picker.
      'library' => array(
        array('system', 'farbtastic'),
      ),
      // Add custom CSS.
      'css' => array(
        $color_base . '/color.css' => array(),
      ),
      // Add custom JavaScript.
      'js' => array(
        $color_base . '/color.js',
        array(
          'data' => array(
            'color' => array(
              'reference' => domain_scss_get_palette($theme, TRUE),
              'schemes' => $schemes,
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );

  // Add palette fields.
  $palette = domain_scss_get_palette($theme);
  $names = $info['fields'];
  $form['palette']['#tree'] = TRUE;
  foreach ($palette as $name => $value) {
    if (isset($names[$name])) {
      $form['palette'][$name] = array(
        '#type' => 'textfield',
        '#title' => check_plain($names[$name]),
        '#default_value' => $value,
        '#size' => 8,
      );
    }
  }
  $form['theme'] = array('#type' => 'value', '#value' => $theme);
  $form['info'] = array('#type' => 'value', '#value' => $info);

  return $form;
}

/**
 * Retrieves the color palette for a particular theme.
 */
function domain_scss_get_palette($theme, $default = FALSE) {
  // Fetch and expand default palette.
  $info = domain_scss_get_info($theme);
  $palette = $info['schemes']['default']['colors'];

  // Load variable.
  return $default ? $palette : variable_get('color_' . $theme . '_palette', $palette);
}

/**
 * Form submission handler for color_scheme_form().
 *
 * @see color_scheme_form_validate()
 */
function domain_scss_scheme_form_submit($form, &$form_state) {
  // Get theme coloring info.
  if (!isset($form_state['values']['info'])) {
    return;
  }
  $theme = $form_state['values']['theme'];
  $info = $form_state['values']['info'];

  drupal_set_message('New stylesheet has been compiled for ' . $theme);

  // Resolve palette.
  $palette = $form_state['values']['palette'];
  if ($form_state['values']['scheme'] != '') {
    foreach ($palette as $key => $color) {
      if (isset($info['schemes'][$form_state['values']['scheme']]['colors'][$key])) {
        $palette[$key] = $info['schemes'][$form_state['values']['scheme']]['colors'][$key];
      }
    }
    $palette += $info['schemes']['default']['colors'];
  }

  // Delete old setup.
  if ($old_dir = variable_get('color_' . $theme . '_files', FALSE)) {
    file_unmanaged_delete_recursive($old_dir);
  }
  variable_del('color_' . $theme . '_palette');
  variable_del('color_' . $theme . '_stylesheets');
  variable_del('color_' . $theme . '_files');

  // Save data.
  variable_set('color_' . $theme . '_palette', $palette);
  domain_scss_generate($theme, $info, $palette);
}

function domain_scss_generate($theme, $info, $palette, $target = NULL) {
  // Set Color directory.
  $paths = array();
  $paths['color'] = 'public://color';

  // Set Target directory.
  if (!$target) {
    $id = $theme . '-' . substr(hash('sha256', serialize($palette) . microtime()), 0, 8);
    $target = $paths['color'] . '//' . $id;
  }
  $paths['target'] = $target;

  // Create the directories.
  foreach ($paths as $path) {
    file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  }

  $css_dir = drupal_realpath($paths['target']);
  $theme_dir = DRUPAL_ROOT . '/'. drupal_get_path('theme', $theme);

  $binary = variable_get('domain_csss_compass_binary', '/var/lib/gems/1.8/bin/compass');

  $cmd = "$binary compile --boring --css-dir $css_dir $theme_dir;";
  foreach ($palette as $key => $value) {
    $key = 'DOMAIN_SCSS_' . $key;

    $cmd = 'export ' . $key . '=' . $value . '; ' . $cmd;
    $cmd = $cmd . ' unset ' . $key . ';';
  }

  $output = shell_exec($cmd);

  watchdog('domain_scss', "Generated css <pre>!cmd\n\n !output</pre>", array('!cmd' => $cmd, '!output' => $output), WATCHDOG_INFO);

  $css = array();
  foreach ($info['css'] as $css_file) {
    $css[] = $paths['target'] . '/' . $css_file;
  }

  // Save data.
  variable_set('color_' . $theme . '_files', $paths['target']);
  variable_set('color_' . $theme . '_stylesheets', $css);
}

function _domain_scss_html_alter(&$vars) {
  global $theme_key;

  $color_dir = variable_get('color_' . $theme_key . '_files', FALSE);
  $palette = variable_get('color_' . $theme_key . '_palette', FALSE);

  if ($color_dir && $palette && !is_dir($color_dir)) {
    $info = domain_scss_get_info($theme_key);
    $palette = variable_get('color_' . $theme_key . '_palette', FALSE);
    domain_scss_generate($theme_key, $info, $palette, $color_dir);
  }

  _color_html_alter($vars);
}


/**
 * Page callback for theme settings of dominion.
 */
function domain_scss_dominion_theme($domain_id) {
  $domain = domain_load($domain_id);
  $theme = domain_theme_lookup($domain['domain_id']);
  if ($theme['theme']) {
    $default_theme = $theme['theme'];
  }
  else {
    $default_theme = variable_get('theme_default', 'bartik');
  }

  module_load_include('inc', 'domain_theme', 'domain_theme.admin');

  // form alter of domain_theme has arg(2) == 'domain' so fake it.
  // also domain_theme expects the theme in arg(6);
  $orig_q = $_GET['q'];
  $_GET['q'] = str_replace('/dominion/', '/domain/', $_GET['q']) . '/' . $default_theme;
  $_GET['destination'] = $orig_q;

  // Setup form.
  $output = domain_theme_settings($domain, $default_theme);

  // Restore correct path.
  $_GET['q'] = $orig_q;

  return $output;
}
